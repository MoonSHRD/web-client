type Community {
  """The ID of an object"""
  id: ID!
  rowId: Int!
  ownerId: ID!
  name: String!
  shortDescription: String!
  avatarUrl: String
  userCount: Int!
  roomIds: [ID!]!
  tags: [ID!]!
  generalRoomId: ID!
  rooms(after: String, first: Int, before: String, last: Int): RoomConnection
  communityUsers(after: String, first: Int, before: String, last: Int): CommunityUserConnection
}

"""A connection to a list of items."""
type CommunityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommunityEdge]
}

"""An edge in a connection."""
type CommunityEdge {
  """The item at the end of the edge"""
  node: Community

  """A cursor for use in pagination"""
  cursor: String!
}

type CommunityUser {
  """The ID of an object"""
  id: ID!
  communityId: ID!
  userId: ID!
  community: Community!
  user: User!
  createdAt: String!
}

"""A connection to a list of items."""
type CommunityUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommunityUserEdge]
}

"""An edge in a connection."""
type CommunityUserEdge {
  """The item at the end of the edge"""
  node: CommunityUser

  """A cursor for use in pagination"""
  cursor: String!
}

type CreateCommunity {
  common: String
  name: String
}

input CreateCommunityInput {
  name: String!
  tags: [ID!]!
  clientMutationId: String
}

type CreateCommunityPayload {
  edge: MonsterCommunityEdge
  errors: CreateCommunity
  clientMutationId: String
}

type CreateRoom {
  common: String
  name: String
}

input CreateRoomInput {
  communityId: ID!
  name: String!
  clientMutationId: String
}

type CreateRoomPayload {
  edge: MonsterRoomEdge
  errors: CreateRoom
  clientMutationId: String
}

type Group implements Node {
  id: ID!
  name: String
  avatarUrl: String
  shortDescription: String
  longDescription: String
  isPublic: Boolean
  joinPolicy: String
  rooms: [Room!]!
}

type GroupMembership {
  id: ID!
  groupId: String!
  userId: String!
  isAdmin: Boolean!
  membership: String!
  isPublicised: Boolean!
  content: String!
  group: Group!
}

type JoinCommunity {
  common: String
  communityId: String
}

input JoinCommunityInput {
  communityId: ID!
  clientMutationId: String
}

type JoinCommunityPayload {
  userEdge: MonsterCommunityUserEdge
  errors: JoinCommunity
  clientMutationId: String
}

type LeaveCommunity {
  common: String
  communityId: String
}

input LeaveCommunityInput {
  communityId: ID!
  clientMutationId: String
}

type LeaveCommunityPayload {
  deletedId: ID
  errors: LeaveCommunity
  clientMutationId: String
}

type MessageContent {
  body: String
}

"""An edge in a connection."""
type MonsterCommunityEdge {
  """The item at the end of the edge"""
  node: Community

  """A cursor for use in pagination"""
  cursor: String!
}

"""An edge in a connection."""
type MonsterCommunityUserEdge {
  """The item at the end of the edge"""
  node: CommunityUser

  """A cursor for use in pagination"""
  cursor: String!
}

"""An edge in a connection."""
type MonsterRoomEdge {
  """The item at the end of the edge"""
  node: Room

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  uploadGroupAvatar(input: UploadGroupAvatarInput!): UploadGroupAvatarPayload
  createCommunity(input: CreateCommunityInput!): CreateCommunityPayload
  joinCommunity(input: JoinCommunityInput!): JoinCommunityPayload
  leaveCommunity(input: LeaveCommunityInput!): LeaveCommunityPayload
  createRoom(input: CreateRoomInput!): CreateRoomPayload
  uploadFile(input: UploadFileInput!): UploadFilePayload
  updateCommunity(input: UpdateCommunityInput!): UpdateCommunityPayload
}

input NewRoomMessageInput {
  roomId: ID!
  clientSubscriptionId: String
}

type NewRoomMessagePayload {
  edge: RoomMessageEdge!
  clientSubscriptionId: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PresignedPostPolicy {
  url: String!
  data: String!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer(accessToken: String, userId: String): Viewer
  user(id: ID!): User
  room(id: ID!): Room
  group(id: ID!): Group
  groups: [Group!]!
  community(id: ID, rowId: Int): Community
  communities(after: String, first: Int, search: String): CommunityConnection
  allCommunityTags: [String!]!
}

type Room implements Node {
  id: ID!
  isPublic: Boolean
  creator: String
  name: String
  messages(after: String, first: Int, before: String, last: Int): RoomMessageConnection
}

"""A connection to a list of items."""
type RoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomEdge]
}

"""An edge in a connection."""
type RoomEdge {
  """The item at the end of the edge"""
  node: Room

  """A cursor for use in pagination"""
  cursor: String!
}

type RoomMessage {
  id: ID!
  roomId: String!
  sender: String
  age: String
  content: MessageContent!
}

"""A connection to a list of items."""
type RoomMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomMessageEdge]
}

"""An edge in a connection."""
type RoomMessageEdge {
  """The item at the end of the edge"""
  node: RoomMessage

  """A cursor for use in pagination"""
  cursor: String!
}

type Subscription {
  newRoomMessage(input: NewRoomMessageInput!): NewRoomMessagePayload
}

type UpdateCommunity {
  common: String
  name: String
}

input UpdateCommunityInput {
  id: ID!
  name: String
  tags: [ID!]
  avatarUrl: String
  clientMutationId: String
}

type UpdateCommunityPayload {
  edge: MonsterCommunityEdge
  errors: UpdateCommunity
  clientMutationId: String
}

type UploadFile {
  common: String
  name: String
}

input UploadFileInput {
  name: String!
  clientMutationId: String
}

type UploadFilePayload {
  policy: PresignedPostPolicy
  errors: UploadFile
  clientMutationId: String
}

input UploadGroupAvatarInput {
  groupId: String!
  ext: String!
  clientMutationId: String
}

type UploadGroupAvatarPayload {
  postURL: String!
  formData: String!
  group: Group!
  clientMutationId: String
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  ownCommunities(after: String, first: Int): CommunityConnection
  ownGroups: [Group!]!
}

type Viewer {
  id: ID!
  groupMembership(isAdmin: Boolean): [GroupMembership!]!
  ownCommunityIds: [ID!]!
  joinedCommunityIds: [ID!]!
  joinedCommunityUsers(
    """for check subscription"""
    communityIds: [ID!]
    after: String
    first: Int
    before: String
    last: Int
  ): CommunityUserConnection
}


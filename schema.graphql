type Community {
  """The ID of an object"""
  id: ID!
  rowId: Int!
  ownerId: ID!
  name: String!
  shortDescription: String!
  avatarUrl: String
  userCount: Int!
  roomIds: [ID!]!
  tags: [ID!]!
  generalRoomId: ID!
  rooms(after: String, first: Int, before: String, last: Int): RoomConnection
}

"""A connection to a list of items."""
type CommunityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommunityEdge]
}

"""An edge in a connection."""
type CommunityEdge {
  """The item at the end of the edge"""
  node: Community

  """A cursor for use in pagination"""
  cursor: String!
}

type CreateCommunity {
  common: String
  name: String
}

input CreateCommunityInput {
  name: String!
  tags: [ID!]!
  clientMutationId: String
}

type CreateCommunityPayload {
  edge: MonsterCommunityEdge
  errors: CreateCommunity
  clientMutationId: String
}

type CreateRoom {
  common: String
  name: String
}

input CreateRoomInput {
  communityId: ID!
  name: String!
  clientMutationId: String
}

type CreateRoomPayload {
  edge: MonsterRoomEdge
  errors: CreateRoom
  clientMutationId: String
}

type Group implements Node {
  id: ID!
  name: String
  avatarUrl: String
  shortDescription: String
  longDescription: String
  isPublic: Boolean
  joinPolicy: String
  rooms: [Room!]!
}

type GroupMembership {
  id: ID!
  groupId: String!
  userId: String!
  isAdmin: Boolean!
  membership: String!
  isPublicised: Boolean!
  content: String!
  group: Group!
}

input JoinInput {
  groupId: ID!
  clientMutationId: String
}

type JoinPayload {
  success: Boolean!
  clientMutationId: String
}

input LeaveInput {
  groupId: ID!
  clientMutationId: String
}

type LeavePayload {
  success: Boolean!
  clientMutationId: String
}

type MessageContent {
  body: String
}

"""An edge in a connection."""
type MonsterCommunityEdge {
  """The item at the end of the edge"""
  node: Community

  """A cursor for use in pagination"""
  cursor: String!
}

"""An edge in a connection."""
type MonsterRoomEdge {
  """The item at the end of the edge"""
  node: Room

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  join(input: JoinInput!): JoinPayload
  leave(input: LeaveInput!): LeavePayload
  uploadGroupAvatar(input: UploadGroupAvatarInput!): UploadGroupAvatarPayload
  createCommunity(input: CreateCommunityInput!): CreateCommunityPayload
  createRoom(input: CreateRoomInput!): CreateRoomPayload
}

input NewRoomMessageInput {
  roomId: ID!
  clientSubscriptionId: String
}

type NewRoomMessagePayload {
  edge: RoomMessageEdge!
  clientSubscriptionId: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer(accessToken: String, userId: String): Viewer
  user(id: ID!): User
  group(id: ID!): Group
  groups: [Group!]!
  community(id: ID, rowId: Int): Community
  communities(after: String, first: Int, search: String): CommunityConnection
  allCommunityTags: [String!]!
}

type Room implements Node {
  id: ID!
  isPublic: Boolean
  creator: String
  name: String
  messages(after: String, first: Int, before: String, last: Int): RoomMessageConnection
}

"""A connection to a list of items."""
type RoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomEdge]
}

"""An edge in a connection."""
type RoomEdge {
  """The item at the end of the edge"""
  node: Room

  """A cursor for use in pagination"""
  cursor: String!
}

type RoomMessage {
  id: ID!
  roomId: String!
  sender: String
  age: String
  content: MessageContent!
}

"""A connection to a list of items."""
type RoomMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomMessageEdge]
}

"""An edge in a connection."""
type RoomMessageEdge {
  """The item at the end of the edge"""
  node: RoomMessage

  """A cursor for use in pagination"""
  cursor: String!
}

type Subscription {
  newRoomMessage(input: NewRoomMessageInput!): NewRoomMessagePayload
}

input UploadGroupAvatarInput {
  groupId: String!
  ext: String!
  clientMutationId: String
}

type UploadGroupAvatarPayload {
  postURL: String!
  formData: String!
  group: Group!
  clientMutationId: String
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  ownGroups: [Group!]!
}

type Viewer {
  id: ID!
  groupMembership(isAdmin: Boolean): [GroupMembership!]!
  room(id: ID!): Room
}

